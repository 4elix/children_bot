import requests as requests
from aiogram.dispatcher import FSMContext
from data.loader import db, dp, bot
from aiogram.types import CallbackQuery, ContentType, Message

from handlers.utils import convert_price
from keyboards.inline import generate_product_detail, generate_cart_buttons, generate_category_create_buttons, \
    generate_firms_admin_buttons, generate_products_admin_buttons, generate_product_detail_for_admin
from languages.langs import langs
from handlers.users.text_handlers import show_menu, show_menu_again
from states.states import LocationForm, AddNewCategory, AddNewSubCategory, AddNewFirm, EditPriceState, \
    EditProductPriceState, EditProductPhotoState, EditProductTitleRuState, EditProductTitleUzState, \
    EditProductDescRuState, EditProductDescUzState
from keyboards.reply import generate_location
from keyboards.inline import generate_commit_order, generate_commit, generate_cancel, \
    generate_subcategories_admin_buttons


@dp.callback_query_handler(lambda call: call.data == 'add_new_category')
async def reaction_to_add_new_category(call: CallbackQuery):
    chat_id = call.message.chat.id
    await AddNewCategory.category_ru.set()
    await bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üá∑üá∫: ')


@dp.message_handler(state=AddNewCategory.category_ru)
async def process_add_new_category_ru(message: Message, state: FSMContext):
    await state.update_data(category_ru=message.text)
    await AddNewCategory.category_uz.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üá∫üáø: ')


@dp.message_handler(state=AddNewCategory.category_uz)
async def process_add_new_category_uz(message: Message, state: FSMContext):
    data = await state.get_data()

    db.create_new_category(data['category_ru'], message.text)
    await state.finish()
    await message.reply("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /admin")


@dp.callback_query_handler(lambda call: call.data.startswith('goto_category_'))
async def show_category_inside(call: CallbackQuery):
    category_id = int(call.data.replace('goto_category_', ''))
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(chat_id, message_id)
    subcategories = db.get_subcategories_for_admin(category_id)
    print(subcategories)
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: ',
                           reply_markup=generate_subcategories_admin_buttons(subcategories, category_id))


@dp.callback_query_handler(lambda call: call.data.startswith('delete_category_'))
async def reaction_to_delete_category_(call: CallbackQuery):
    category_id = int(call.data.replace('delete_category_', ''))
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(chat_id, message_id)
    db.delete_category(category_id)
    await bot.send_message(chat_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –£–î–ê–õ–ï–ù–ê. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /admin")


@dp.callback_query_handler(lambda call: call.data == 'back_to_all_categories')
async def reaction_to_back_to_all_categories(call: CallbackQuery):
    chat_id = call.message.chat.id
    await bot.delete_message(chat_id, call.message.message_id)
    categories = db.get_all_categories()
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é',
                           reply_markup=generate_category_create_buttons(categories))


@dp.callback_query_handler(lambda call: call.data.startswith('add_new_subcategory'))
async def reaction_to_add_new_subcategory(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.replace('add_new_subcategory_', ''))
    category = db.get_category(category_id)
    chat_id = call.message.chat.id
    await state.update_data(category_id=category_id)
    await AddNewSubCategory.category_ru.set()
    await bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category[1]}"  üá∑üá∫: ')


@dp.message_handler(state=AddNewSubCategory.category_ru)
async def process_add_new_subcategory_ru(message: Message, state: FSMContext):
    await state.update_data(category_ru=message.text)
    await AddNewSubCategory.category_uz.set()
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏  üá∫üáø: ')


@dp.message_handler(state=AddNewSubCategory.category_uz)
async def process_add_new_subcategory(message: Message, state: FSMContext):
    data = await state.get_data()
    db.create_new_subcategory(data['category_ru'], message.text, data['category_id'])
    await state.finish()
    await message.reply("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /admin")


@dp.callback_query_handler(lambda call: call.data.startswith('delete_subcategory_'))
async def reaction_to_delete_subcategory_(call: CallbackQuery):
    category_id = int(call.data.replace('delete_subcategory_', ''))
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(chat_id, message_id)
    db.delete_subcategory(category_id)
    await bot.send_message(chat_id, "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –£–î–ê–õ–ï–ù–ê. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /admin")


@dp.callback_query_handler(lambda call: call.data.startswith('back_to_subcategory_'))
@dp.callback_query_handler(lambda call: call.data.startswith('goto_subcategory_'))
async def show_subcategory_inside(call: CallbackQuery):
    if call.data.startswith('back_to_subcategory_'):
        firm_id = int(call.data.replace('back_to_subcategory_', ''))
        subcategory_id = db.get_subcategory_by_firm_id(firm_id)
    else:
        subcategory_id = int(call.data.replace('goto_subcategory_', ''))
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(chat_id, message_id)
    firms = db.get_firms_for_admin(subcategory_id)
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—Ä–º—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é: ',
                           reply_markup=generate_firms_admin_buttons(firms, subcategory_id))


@dp.callback_query_handler(lambda call: call.data.startswith('add_new_firm'))
async def reaction_to_add_new_firm(call: CallbackQuery, state: FSMContext):
    subcategory_id = int(call.data.replace('add_new_firm_', ''))
    subcategory = db.get_subcategory(subcategory_id)
    chat_id = call.message.chat.id
    await state.update_data(subcategory_id=subcategory_id)
    await AddNewFirm.category_ru.set()
    await bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏—Ä–º—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{subcategory[1]}"  üá∑üá∫: ')


@dp.message_handler(state=AddNewFirm.category_ru)
async def process_add_new_firm_ru(message: Message, state: FSMContext):
    await state.update_data(category_ru=message.text)
    await AddNewFirm.category_uz.set()
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏—Ä–º—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üá∫üáø: ')


@dp.message_handler(state=AddNewFirm.category_uz)
async def process_add_new_firm_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    db.create_new_firm(data['category_ru'], message.text, data['subcategory_id'])
    await state.finish()
    await message.reply("–§–∏—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /admin")


@dp.callback_query_handler(lambda call: call.data.startswith('delete_firm_'))
async def reaction_to_delete_subcategory_(call: CallbackQuery):
    category_id = int(call.data.replace('delete_firm_', ''))
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(chat_id, message_id)
    db.delete_firm(category_id)
    await bot.send_message(chat_id, "–§–∏—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –£–î–ê–õ–ï–ù–ê. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /admin")


@dp.callback_query_handler(lambda call: call.data.startswith('back_to_products_list_'))
@dp.callback_query_handler(lambda call: call.data.startswith('goto_firm_'))
async def show_firms_inside(call: CallbackQuery):
    if call.data.startswith('back_to_products_list_'):
        product_id = int(call.data.replace('back_to_products_list_', ''))
        firm_id = db.get_firm_id_by_product_id(product_id)
    else:
        firm_id = int(call.data.replace('goto_firm_', ''))
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.delete_message(chat_id, message_id)
    products = db.get_products_for_admin(firm_id)
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π: ',
                           reply_markup=generate_products_admin_buttons(products, firm_id))


@dp.callback_query_handler(lambda call: call.data.startswith('goto_product_'))
async def show_product_inside(call: CallbackQuery = None, given_product_id=None, given_chat_id=None):
    if given_product_id:
        product_id = given_product_id
        chat_id = given_chat_id
    else:
        product_id = int(call.data.replace('goto_product_', ''))
        chat_id = call.message.chat.id
    product = db.get_product_detail_by_id(product_id)
    if str(product[-1]) == '1':
        status = '–î–æ—Å—Ç—É–ø–µ–Ω ‚úÖ'
    else:
        status = '–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚ùå'
    caption = f'–¢–æ–≤–∞—Ä:\n\nüá∑üá∫: {product[1]}\n\nüá∫üáø: {product[2]}\n\nüá∑üá∫: {product[3]}\n\nüá∫üáø: {product[4]}\n\n–¶–µ–Ω–∞ {convert_price(product[5])}\n\n–°—Ç–∞—Ç—É—Å: {status}'
    try:
        await bot.send_photo(chat_id,
                             photo=product[6],
                             caption=caption,
                             reply_markup=generate_product_detail_for_admin(product_id)
                             )
    except Exception as e:
        await bot.send_message(chat_id,
                               f'{e}\n\n–¢–æ–≤–∞—Ä: {product[1]}\n\n{product[3]}\n\n–¶–µ–Ω–∞ {convert_price(product[5])}\n\n–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å',
                               reply_markup=generate_product_detail_for_admin(product[0]))


@dp.callback_query_handler(lambda call: call.data.startswith('edit_photo_'))
async def edit_photo_product(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.replace('edit_photo_', ''))
    await state.update_data(product_id=product_id)
    await EditProductPhotoState.photo.set()
    await bot.send_message(chat_id=call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ')


@dp.message_handler(state=EditProductPhotoState.photo, content_types=['photo'])
async def save_new_photo(message: Message, state: FSMContext):
    chat_id = message.chat.id
    image = message.photo[0].file_id
    data = await state.get_data()
    product_id = data['product_id']
    await state.finish()
    db.update_photo_product(product_id, image)
    await bot.send_message(chat_id, f'–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ')
    await show_product_inside(given_product_id=product_id, given_chat_id=chat_id)


@dp.callback_query_handler(lambda call: call.data.startswith('edit_price_'))
async def edit_price_product(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.replace('edit_price_', ''))
    await state.update_data(product_id=product_id)
    await EditProductPriceState.price.set()
    await bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞')


@dp.message_handler(state=EditProductPriceState.price, regexp='\d+')
async def save_new_price(message: Message, state: FSMContext):
    chat_id = message.chat.id
    price = int(message.text)
    data = await state.get_data()
    product_id = data['product_id']
    await state.finish()
    db.update_price_product(product_id, price)
    await bot.send_message(chat_id, f'–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price}')
    await show_product_inside(given_product_id=product_id, given_chat_id=chat_id)


# TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤–µ–∑–¥–µ
# TODO –°–¥–µ–ª–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞


@dp.callback_query_handler(lambda call: call.data.startswith('delete_product_'))
async def delete_product_reaction(call: CallbackQuery):
    product_id = call.data.replace('delete_product_', '')
    db.delete_product(product_id)
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.send_message(call.message.chat.id, '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.... –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É')


# ------------------------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è -------------------------------------------- #

@dp.callback_query_handler(lambda call: call.data.startswith('edit_titleru_'))
async def edit_title_ru_product(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.replace('edit_titleru_', ''))
    await state.update_data(product_id=product_id)
    await EditProductTitleRuState.title_ru.set()
    await bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üá∑üá∫')


@dp.message_handler(state=EditProductTitleRuState.title_ru)
async def save_new_title_ru(message: Message, state: FSMContext):
    chat_id = message.chat.id
    title_ru = message.text
    data = await state.get_data()
    product_id = data['product_id']
    await state.finish()
    db.update_title_ru_product(product_id, title_ru)
    await bot.send_message(chat_id, f'–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {title_ru}')
    await show_product_inside(given_product_id=product_id, given_chat_id=chat_id)

@dp.callback_query_handler(lambda call: call.data.startswith('edit_titleuz_'))
async def edit_title_uz_product(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.replace('edit_titleuz_', ''))
    await state.update_data(product_id=product_id)
    await EditProductTitleUzState.title_uz.set()
    await bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üá∫üáø:')


@dp.message_handler(state=EditProductTitleUzState.title_uz)
async def save_new_title_uz(message: Message, state: FSMContext):
    chat_id = message.chat.id
    title_uz = message.text
    data = await state.get_data()
    product_id = data['product_id']
    await state.finish()
    db.update_title_uz_product(product_id, title_uz)
    await bot.send_message(chat_id, f'–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {title_uz}')
    await show_product_inside(given_product_id=product_id, given_chat_id=chat_id)

# ------------------------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è -------------------------------------------- #

@dp.callback_query_handler(lambda call: call.data.startswith('edit_descru_'))
async def edit_desc_ru_product(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.replace('edit_descru_', ''))
    await state.update_data(product_id=product_id)
    await EditProductDescRuState.desc_ru.set()
    await bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üá∑üá∫')


@dp.message_handler(state=EditProductDescRuState.desc_ru)
async def save_new_desc_ru(message: Message, state: FSMContext):
    chat_id = message.chat.id
    desc_ru = message.text
    data = await state.get_data()
    product_id = data['product_id']
    await state.finish()
    db.update_desc_ru_product(product_id, desc_ru)
    await bot.send_message(chat_id, f'–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {desc_ru}')
    await show_product_inside(given_product_id=product_id, given_chat_id=chat_id)

@dp.callback_query_handler(lambda call: call.data.startswith('edit_descuz_'))
async def edit_desc_uz_product(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.replace('edit_descuz_', ''))
    await state.update_data(product_id=product_id)
    await EditProductDescUzState.desc_uz.set()
    await bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üá∫üáø:')


@dp.message_handler(state=EditProductDescUzState.desc_uz)
async def save_new_desc_uz(message: Message, state: FSMContext):
    chat_id = message.chat.id
    desc_uz = message.text
    data = await state.get_data()
    product_id = data['product_id']
    await state.finish()
    db.update_desc_uz_product(product_id, desc_uz)
    await bot.send_message(chat_id, f'–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:  {desc_uz}')
    await show_product_inside(given_product_id=product_id, given_chat_id=chat_id)


@dp.callback_query_handler(lambda call: call.data.startswith('available_'))
async def change_status(call: CallbackQuery):
    product_id = call.data.replace('available_', '')
    db.change_available(product_id)
    await bot.send_message(call.message.chat.id, f'–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
    await show_product_inside(given_product_id=product_id, given_chat_id=call.message.chat.id)


